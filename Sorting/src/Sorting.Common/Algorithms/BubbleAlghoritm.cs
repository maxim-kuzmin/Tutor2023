// Copyright (c) 2023 Maxim Kuzmin. All rights reserved. Licensed under the MIT License.

namespace Sorting.Common.Algorithms
{
    /// <summary>
    /// Алгоритм "Сортировка пузырьком".
    /// Сложность квадратичная: O(N^2),
    /// так как используются 2 вложенных цикла: внешний с (N - 1) 
    /// и внутренний с (N / 2) итерациями, включающими в себя по
    /// одной операции сравнения и в худшем случае одной операции
    /// обмена: (N - 1) * (N / 2) * (2) = (N - 1) * (N) = O(N^2).
    /// Начиная с первого элемента каждый элемент массива последовательно
    /// сравнивается со всеми его последующими элементами.
    /// В случае, если текущий элемент элемент больше предыдущего,
    /// они меняются местами.
    /// Таким образом наибольший элемент "всплывает" как пузырёк к
    /// концу массива и упорядоченная часть массива формируется в его конце.
    /// Алгоритм эффективен, когда когда элементов массива не много.
    /// </summary>
    /// <typeparam name="T">Тип сортируемого значения.</typeparam>
    public class BubbleAlghoritm<T> : Algorithm<T>
        where T : IComparable<T>
    {
        public BubbleAlghoritm()
            : base("Bubble")
        {
        }

        /// <inheritdoc/>
        protected sealed override void DoSort(T[] array)
        {
            // Проходим по массиву, начиная с первого элемента.
            // iCur - индекс текущего элемента.
            for (int iCur = 0; iCur < array.Length - 1; iCur++)
            {
                // Проходим по массиву вперёд, начиная со следующего элемента,
                // стоящего за текущим, и заканчивая последним элементом массива.
                // iNext - индекс следующего элемента.
                for (int iNext = iCur + 1; iNext < array.Length; iNext++)
                {
                    // Если следующий элемент меньше текущего,
                    if (Compare(array[iNext], array[iCur]) < 0)
                    {
                        // меняем их местами.
                        Swap(ref array[iNext], ref array[iCur]);
                    }
                }
            }
        }
    }
}
